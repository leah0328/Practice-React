{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ziyan/Documents/ReactProjects/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description // all passed through props from getStaticProps() below\n    // data for the single meetup  (after you click on 'show details')\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}; // getStaticPath() is a 'must-do' when generating dynamic pages using 'getStaticProps'\n// to tell NEXTJS for which dynamic values it should pre-generate the page\n// for getStaticPaths(), we are pre-generating the paths for each specific id on the collections\n// to prepare for when user click on 'show detail' on certain meetup\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://writeUser:qcBtbpVwU3MZ1MaT@cluster0.jnmkq.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // .find({},{_id:1}) :\n  //  1st argument = define the filter criteria,\n  // an empty object = so we can find all document (all object) in the collection, instead of filter for certain field values\n  //  2nd argument =  defines which field should be extracted for every document (by deafult all the field willbe returned (title, image))\n  // {_id:1} = only return the _id field\n\n  client.close();\n  return {\n    fallback: false,\n    // 'false' meaning: the path arrays content all supported parameter values,\n    // so users will be directed to 404 if they enters an invalid meetupId values\n    // 'true', NEXTJS will generate a page for the meet ID dynamically on the server for incoming request\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // for every meetup (object with an id) in 'meetups' (the collection)\n    // each of them should have a params key, which holds an meetupId object, with the value of the autogenerated Ids (._id) (that is converted to String)\n    // hard-coded version\n    // paths: [\n    //   {\n    //     params: {\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m3\",\n    //     },\n    //   },\n    // ],\n\n  };\n}\nexport async function getStaticProps(context) {\n  //for getStaticProps() we are fetch data for single meetup (after you click on 'show details')\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://writeUser:qcBtbpVwU3MZ1MaT@cluster0.jnmkq.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId) // to ensure we can correctly look for a specific id, we need to convert it from string to the ObjectId\n\n  }); // .findOne({_id:mmetupId}) :\n  //  1st argument = define the filter criteria,\n  // {_id:mmetupId} = look for object with the targeted id\n  // if {} (an empty object) =  find all document (all object) in the collection, instead of filter for certain field values\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        // conver the ._id back to string, so there's wouldnt be any error\n        title: selectedMeetup.title,\n        addess: selectedMeetup.addess,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image\n      } // {\n      // image:\n      //   \"https://images.unsplash.com/photo-1600861194942-f883de0dfe96?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1049&q=80\",\n      // id: meetupId,\n      // title: \"Xbox Gaming Session\",\n      // address: \"6 Land Street\",\n      // description: \"Everyone's invited! Come join us for a gaming session!\",\n      // },\n\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/ziyan/Documents/ReactProjects/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id","addess"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI,WAJhC,CAKE;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAXD,C,CAaA;AACA;AAEA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,iHADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CATqC,CAUrC;AACA;AACA;AAEA;AACA;;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAEL;AACA;AACA;AAEAC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ,CANF,CASL;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA7BK,GAAP;AA+BD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,iHADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACrDb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,QAAD,CADwC,CAC5B;;AAD4B,GAA1B,CAA7B,CAb4C,CAgB5C;AACA;AACA;AACA;;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AACyB;AACnCpB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFZ;AAGV0B,QAAAA,MAAM,EAAEH,cAAc,CAACG,MAHb;AAIVxB,QAAAA,WAAW,EAAEqB,cAAc,CAACrB,WAJlB;AAKVH,QAAAA,KAAK,EAAEwB,cAAc,CAACxB;AALZ,OADP,CAQL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAfK;AADF,GAAP;AAmBD;AAED,eAAeH,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n      // all passed through props from getStaticProps() below\n      // data for the single meetup  (after you click on 'show details')\n    />\n  );\n};\n\n// getStaticPath() is a 'must-do' when generating dynamic pages using 'getStaticProps'\n// to tell NEXTJS for which dynamic values it should pre-generate the page\n\n// for getStaticPaths(), we are pre-generating the paths for each specific id on the collections\n// to prepare for when user click on 'show detail' on certain meetup\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://writeUser:qcBtbpVwU3MZ1MaT@cluster0.jnmkq.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  // .find({},{_id:1}) :\n  //  1st argument = define the filter criteria,\n  // an empty object = so we can find all document (all object) in the collection, instead of filter for certain field values\n\n  //  2nd argument =  defines which field should be extracted for every document (by deafult all the field willbe returned (title, image))\n  // {_id:1} = only return the _id field\n\n  client.close();\n\n  return {\n    fallback: false,\n    // 'false' meaning: the path arrays content all supported parameter values,\n    // so users will be directed to 404 if they enters an invalid meetupId values\n    // 'true', NEXTJS will generate a page for the meet ID dynamically on the server for incoming request\n\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n    // for every meetup (object with an id) in 'meetups' (the collection)\n    // each of them should have a params key, which holds an meetupId object, with the value of the autogenerated Ids (._id) (that is converted to String)\n\n    // hard-coded version\n    // paths: [\n    //   {\n    //     params: {\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m3\",\n    //     },\n    //   },\n    // ],\n  };\n}\n\nexport async function getStaticProps(context) {\n  //for getStaticProps() we are fetch data for single meetup (after you click on 'show details')\n\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://writeUser:qcBtbpVwU3MZ1MaT@cluster0.jnmkq.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId), // to ensure we can correctly look for a specific id, we need to convert it from string to the ObjectId\n  });\n  // .findOne({_id:mmetupId}) :\n  //  1st argument = define the filter criteria,\n  // {_id:mmetupId} = look for object with the targeted id\n  // if {} (an empty object) =  find all document (all object) in the collection, instead of filter for certain field values\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(), // conver the ._id back to string, so there's wouldnt be any error\n        title: selectedMeetup.title,\n        addess: selectedMeetup.addess,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image,\n      },\n      // {\n      // image:\n      //   \"https://images.unsplash.com/photo-1600861194942-f883de0dfe96?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1049&q=80\",\n      // id: meetupId,\n      // title: \"Xbox Gaming Session\",\n      // address: \"6 Land Street\",\n      // description: \"Everyone's invited! Come join us for a gaming session!\",\n      // },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}