{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ziyan/Documents/ReactProjects/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description // all passed through props from getStaticProps() below\n      // data for the single meetup  (after you click on 'show details')\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, _this);\n}; // getStaticPath() is a 'must-do' when generating dynamic pages using 'getStaticProps'\n// to tell NEXTJS for which dynamic values it should pre-generate the page\n// for getStaticPaths(), we are pre-generating the paths for each specific id on the collections\n// to prepare for when user click on 'show detail' on certain meetup\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/ziyan/Documents/ReactProjects/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","Fragment","Head","MeetupDetails","props","meetupData","title","description","image","address"],"mappings":";;;;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,eADF,eAIE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,eAJF;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAOE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAD1B;AAEE,MAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI,OAH5B;AAIE,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBE,WAJhC,CAKE;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,aAPF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAkBD,CAnBD,C,CAqBA;AACA;AAEA;AACA;;;KAzBMJ,a;;AA6HN,eAAeA,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\n\nconst MeetupDetails = (props) => {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        {/*dynamic output*/}\n        {/*this will appear as the tab title, and in the page source, so better SEO*/}\n        <meta name=\"description\" content={props.meetupData.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n        // all passed through props from getStaticProps() below\n        // data for the single meetup  (after you click on 'show details')\n      />\n    </Fragment>\n  );\n};\n\n// getStaticPath() is a 'must-do' when generating dynamic pages using 'getStaticProps'\n// to tell NEXTJS for which dynamic values it should pre-generate the page\n\n// for getStaticPaths(), we are pre-generating the paths for each specific id on the collections\n// to prepare for when user click on 'show detail' on certain meetup\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://writeUser:qcBtbpVwU3MZ1MaT@cluster0.jnmkq.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  // .find({},{_id:1}) :\n  //  1st argument = define the filter criteria,\n  // an empty object = so we can find all document (all object) in the collection, instead of filter for certain field values\n\n  //  2nd argument =  defines which field should be extracted for every document (by deafult all the field willbe returned (title, image))\n  // {_id:1} = only return the _id field\n\n  client.close();\n\n  return {\n    fallback: false,\n    // 'false' meaning: the path arrays content all supported parameter values,\n    // so users will be directed to 404 if they enters an invalid meetupId values\n    // 'true', NEXTJS will generate a page for the meet ID dynamically on the server for incoming request\n\n    // if we allow people to add new meetup event, should set it to true or 'blocking'\n    // so nextjs will not respond with a 404 page, if it cant find the page immidiately\n\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n    // for every meetup (object with an id) in 'meetups' (the collection)\n    // each of them should have a params key, which holds an meetupId object, with the value of the autogenerated Ids (._id) (that is converted to String)\n\n    // hard-coded version\n    // paths: [\n    //   {\n    //     params: {\n    //       meetupId: \"m1\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m2\",\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: \"m3\",\n    //     },\n    //   },\n    // ],\n  };\n}\n\nexport async function getStaticProps(context) {\n  //for getStaticProps() we are fetch data for single meetup (after you click on 'show details')\n\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://writeUser:qcBtbpVwU3MZ1MaT@cluster0.jnmkq.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId), // to ensure we can correctly look for a specific id, we need to convert it from string to the ObjectId\n  });\n  // .findOne({_id:mmetupId}) :\n  //  1st argument = define the filter criteria,\n  // {_id:mmetupId} = look for object with the targeted id\n  // if {} (an empty object) =  find all document (all object) in the collection, instead of filter for certain field values\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(), // conver the ._id back to string, so there's wouldnt be any error\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image,\n      },\n      // {\n      // image:\n      //   \"https://images.unsplash.com/photo-1600861194942-f883de0dfe96?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1049&q=80\",\n      // id: meetupId,\n      // title: \"Xbox Gaming Session\",\n      // address: \"6 Land Street\",\n      // description: \"Everyone's invited! Come join us for a gaming session!\",\n      // },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}